{"version":3,"sources":["util/pinata.js","constants/address.js","util/interact.js","Components/Claim.js","Components/ConnectWallet.js","Components/Header.js","Components/Gallery.js","Components/Team.js","Components/Faq.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","process","REACT_APP_PINATA_KEY","REACT_APP_PINATA_SECRET","contractAddress","chainId","connectWallet","a","window","ethereum","request","method","chain","console","log","parseInt","addressArray","length","address","status","params","message","getCurrentWalletConnected","getContract","walletAddress","contract","contractABI","ethers","Contract","getDefaultProvider","signer","providers","Web3Provider","getSigner","Claim","props","maxTokenPurchase","maxTokens","tokenPrice","setStatus","loading","totalSupply","setMintLoading","useState","mintCount","setMintCount","event","preventDefault","mintToken","value","BigNumber","from","mul","tx","wait","transactionHash","errorContainer","error","errorBody","substr","indexOf","onChangeMintCount","isIncrea","newCount","id","className","alt","src","onClick","type","readOnly","parseFloat","href","e","onMint","ConnectWallet","show","onHide","connectMetamask","Modal","centered","Header","closeButton","Title","Body","ListGroup","Item","social_btns","onClickConnectWallet","onClickDisconnectWallet","modalShow","setModalShow","rel","slice","map","social_btn","i","link","target","text1","text","Gallery","pos","setPos","openseaLink","setOpenseaLink","openseaUrl","setOpenseaUrl","useEffect","setTimeout","date","Date","getMonth","getDay","style","backgroundPosition","Team","Props","teams","team","avatar","name","position","Faq","faqs","faq","title","content","getFullYear","App","setWalletAddress","setTokenPrice","setMaxTokens","setMaxTokenPurchase","setTotalSupply","MAX_TOKENS","mtb","mtp","ts","tp","toString","div","toast","info","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","walletResponse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdff788d.chunk.js","sourcesContent":["require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n//imports needed for this function\nconst axios = require('axios');\nconst fs = require('fs');\nconst FormData = require('form-data');\n\nexport const pinJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    console.log(key, secret, JSONBody)\n    return axios\n        .post(url, JSONBody, {\n            headers: {\n                'pinata_api_key': key,\n                'pinata_secret_api_key': secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataUrl: response.data.IpfsHash\n            //    pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n           \n        });\n};\n\nexport const pinFileToIPFS = async(filename) => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n\n    //we gather a local file for this example, but any valid readStream source will work here.\n    let data = new FormData();\n    console.log(filename)\n    data.append('file', fs.createReadStream(filename));\n\n    //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\n    //metadata is optional\n    const metadata = JSON.stringify({\n        name: 'pic',\n        keyvalues: {\n            Key: 'Value'\n        }\n    });\n    data.append('pinataMetadata', metadata);\n\n    //pinataOptions are optional\n    const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n            regions: [\n                {\n                    id: 'FRA1',\n                    desiredReplicationCount: 1\n                },\n                {\n                    id: 'NYC1',\n                    desiredReplicationCount: 2\n                }\n            ]\n        }\n    });\n    data.append('pinataOptions', pinataOptions);\n\n    return axios\n        .post(url, data, {\n            maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n            headers: {\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n                'pinata_api_key': key,\n                'pinata_secret_api_key': secret,\n            }\n        })\n        .then(function (response) {\n            //handle response here\n            console.log(response.data.IpfsHash)\n            return {\n                success: true,\n                pinataUrl: response.data.IpfsHash\n             //    pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n            };\n        })\n        .catch(function (error) {\n            //handle error here\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n           \n        });\n};\n\nexport const removePinFromIPFS = (hashToUnpin) => {\n    if (hashToUnpin.includes('/')) {\n        hashToUnpin = hashToUnpin.substring( hashToUnpin.lastIndexOf('/')+1 )\n    }\n    const url = `https://api.pinata.cloud/pinning/unpin/${hashToUnpin}`;\n    return axios\n        .delete(url, {\n            headers: {\n                'pinata_api_key': key,\n                'pinata_secret_api_key': secret,\n            }\n        })\n        .then(function (response) {\n            //handle response here\n            // console.log(response)\n        })\n        .catch(function (error) {\n            //handle error here\n            // console.log(error)\n        });\n};","export const contractAddress = \"0x2b8418Dd985baaC1DaA2fC48D39e84a05e788237\";\r\nexport const chainId = \"0x4\"; //Rinkeby Testnet","import { pinFileToIPFS } from \"./pinata.js\"\nimport { ethers } from 'ethers'\nimport { contractAddress } from '../constants/address'\nimport { chainId } from '../constants/address'\nrequire(\"dotenv\").config()\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const chain = await window.ethereum.request({ method: 'eth_chainId' })\n      console.log(chain, parseInt(chain, 16), chainId, parseInt(chain, 16) === chainId)\n      if (parseInt(chain, 16) == chainId) {\n        const addressArray = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        })\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 You can mint new pack now.\",\n          }\n        } else {\n          return {\n            address: \"\",\n            status: \"😥 Connect your wallet account to the site.\",\n          }\n        }\n      } else {\n        window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId:chainId }],\n        })\n        return {\n          address: \"\",\n          status: \"😥 Connect your wallet account to the site.\",\n        }\n      }\n      \n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            {/* <a target=\"_blank\" href={`https://metamask.io/download.html`}> */}\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.(https://metamask.io/download.html)\n            {/* </a> */}\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      })\n      const chain = await window.ethereum.request({\n        method: \"eth_chainId\",\n      })\n      if (addressArray.length > 0 && chain === chainId) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 You can mint new pack now.\",\n        }\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask and choose the correct chain using the top right button.\",\n        }\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      }\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            {/* <a target=\"_blank\" href={`https://metamask.io/download.html`}> */}\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.(https://metamask.io/download.html)\n            {/* </a> */}\n          </p>\n        </span>\n      ),\n    }\n  }\n}\n\n\n\nexport const upload = async() => {\n  const reader = new FileReader()\n  console.log('sdfsdf')\n  reader.onloadend = function() {\n    console.log(reader.result)\n\n    // const buf = buffer.Buffer(reader.result) // Convert data into buffer\n  }\n  const sdf = await pinFileToIPFS('nft.png')\n  console.log(sdf)\n  // const photo = document.getElementById(\"photo\")\n  // reader.readAsArrayBuffer(photo.files[0]) // Read Provided File\n}\n\nexport const getContract = (walletAddress) => {\n  const contractABI = require(\"../constants/contract.json\")\n  var contract\n\n  if(walletAddress == null || walletAddress == '' ) {\n    contract = new ethers.Contract(contractAddress, contractABI, ethers.getDefaultProvider('rinkeby'))\n  } else {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    contract = new ethers.Contract(contractAddress, contractABI, signer)\n  }\n\n  return contract\n}","import React, { useState } from 'react';\r\nimport { BigNumber } from 'ethers'\r\nimport { getContract } from '../util/interact';\r\n\r\nconst lbl_claim_title = 'CLAIM YOUR BRAIN!';\r\nconst lbl_start_minting = 'MINTING DATE WILL BE ANNOUNCED SOON!';\r\nconst View_brain = 'VIEW YOUR BRAIN ON OPENSEA AFTER MINTING!';\r\n\r\nfunction Claim(props) {\r\n\r\n   const { maxTokenPurchase, maxTokens, tokenPrice, setStatus, loading, walletAddress, totalSupply, setMintLoading } = props\r\n   const [mintCount, setMintCount] = useState(10);\r\n\r\n   async function onMint(event) {\r\n      event.preventDefault()\r\n\r\n      if (!walletAddress) {\r\n          setStatus('Please connect with Metamask')\r\n          return\r\n      }\r\n      if (mintCount === 0) {\r\n         setStatus(`Please input the number of Brains.`)\r\n         return          \r\n      }\r\n      if (mintCount > maxTokenPurchase) {\r\n         setStatus(`You can mint maximum up to 20 Brain.`)\r\n         return \r\n      }\r\n\r\n      setMintLoading(true)\r\n      const contract = getContract(walletAddress)\r\n      try {\r\n         let tx = await contract.mintToken(mintCount, { value: BigNumber.from(1e9).mul(BigNumber.from(1e4)).mul(tokenPrice).mul(mintCount), from: walletAddress })\r\n         let res = await tx.wait()\r\n         if (res.transactionHash) {\r\n            setStatus(`You minted ${mintCount} BRAIN Successfully`)\r\n            setMintLoading(false)\r\n         }\r\n      } catch (err) {\r\n         let errorContainer =  (err.error && err.error.message)  ? err.error.message : ''\r\n         let errorBody = errorContainer.substr(errorContainer.indexOf(\":\")+1)\r\n         let status = \"Transaction failed because you have insufficient funds or sales not started\"\r\n         errorContainer.indexOf(\"execution reverted\") === -1 ? setStatus(status) : setStatus(errorBody)\r\n         setMintLoading(false)\r\n      }\r\n     \r\n   }\r\n\r\n   function onChangeMintCount(isIncrea) {\r\n      let newCount = isIncrea? mintCount + 1 : mintCount - 1\r\n      if ( newCount > 20 ) newCount = 20\r\n      if ( newCount < 0 ) newCount = 0\r\n      setMintCount(newCount)\r\n   }\r\n\r\n   return (\r\n      <section id=\"plain_black\" className=\"container\">\r\n            <img id=\"desktop\" alt=\"\" src=\"images/landing/desktop.png\" />\r\n            <img id=\"mobile\" alt=\"\" src=\"images/landing/mobile.png\"/>\r\n         <div className=\"\" id=\"claim_total\">\r\n            <div id=\"mint_begin\" className=\"text-center\">\r\n               {lbl_start_minting}\r\n            </div>\r\n            <div id=\"claim_brain_text\" className=\"text-center\">\r\n               {lbl_claim_title}\r\n            </div>\r\n            <div id=\"minting\">\r\n               <div className=\" TotalSupply\">\r\n                     <div className=\"DuckCount\">{totalSupply} / {maxTokens}</div>\r\n               </div>\r\n            </div>\r\n\r\n            <div id=\"mint_count\">\r\n               <button className=\"minus-btn\" onClick={() => onChangeMintCount(false)}> - </button>\r\n               <input type=\"number\" readOnly value={mintCount} />   \r\n               <button className=\"plus-btn\" onClick={() => onChangeMintCount(true)}> + </button>\r\n            </div>\r\n\r\n\r\n            <div id=\"mint_title\" className=\"text-center\">\r\n               {maxTokenPurchase} MINT MAX\r\n            </div>\r\n            <div id=\"mint_content\" className=\"text-center\">\r\n               1 BRAIN = {parseFloat(tokenPrice/100000)} ETH\r\n            </div>\r\n            <div className=\"\" id=\"mint_link_btn\">\r\n               {\r\n                  loading ?\r\n                  <a id=\"mint_btn\" href=\"/\" className=\"text-center\" onClick={e => e.preventDefault()}>\r\n                     <div id=\"mint_now\">Minting</div>\r\n                  </a>\r\n                  :\r\n                  <a id=\"mint_btn\" href=\"/\" className=\"text-center\" onClick={e => onMint(e)}>\r\n                     <div id=\"mint_now\">MINT</div>\r\n                  </a>\r\n              }\r\n            </div>\r\n            <div className=\"text-center\">\r\n               <div id=\"view_brain\">{View_brain}</div>\r\n            </div>\r\n         </div>\r\n      </section>\r\n   )\r\n}\r\n\r\nexport default Claim;\r\n","import React, {useState} from 'react';\r\nimport {Modal, ListGroup} from \"react-bootstrap\";\r\n\r\nfunction ConnectWallet(props) {\r\n\r\n  const { show, onHide, connectMetamask } = props\r\n\r\n  function connect_metamask() {\r\n    onHide()\r\n    connectMetamask()\r\n  }\r\n  \r\n  return (\r\n    <Modal show={show} onHide={onHide}  aria-labelledby=\"contained-modal-title-vcenter\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Connect to a wallet\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <ListGroup>\r\n          <ListGroup.Item onClick={ () => connect_metamask() }> \r\n            MetaMask \r\n            <div className=\"wallet-logo\">\r\n              <img src=\"images/landing/wallet/metamask.png\"></img>\r\n            </div>\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\n  export default ConnectWallet;","import React, {useState} from 'react';\r\nimport ConnectWallet from './ConnectWallet';\r\n\r\nfunction Header(props) {\r\n\r\n   const { social_btns, onClickConnectWallet, onClickDisconnectWallet, walletAddress } = props\r\n   const [modalShow, setModalShow] = useState(false);\r\n\r\n   return social_btns ? (\r\n      <header id=\"home\">\r\n         <img id=\"brainiac_society\" alt=\"\" src=\"images/landing/header_bg.png\" />\r\n         <div className=\"container\" id=\"home\">\r\n            <div className=\"\" id=\"\">\r\n               <img id=\"logo\" alt=\"\" src=\"images/landing/brainiac.png\" />\r\n            </div>\r\n            <div className=\"row connect_btn\">\r\n               <div className=\"col-sm-12\">\r\n                  {\r\n                     walletAddress ? \r\n                        <a rel=\"noopener noreferrer\" onClick={e => onClickDisconnectWallet(e)}><div className=\"link_btn\" >{ walletAddress.slice(0, 11) }...</div></a>\r\n                        :\r\n                        <a rel=\"noopener noreferrer\" onClick={() => setModalShow(true)}><div className=\"link_btn\" >CONNECT</div></a>\r\n                  }\r\n               </div>\r\n            </div>\r\n\r\n            <div className=\"row btn_grp\" id=\"mobile_btn\">\r\n               {social_btns.map((social_btn, i) =>     \r\n                     <div className=\"\" key={i}>\r\n                        <a href={social_btn.link} target=\"_blank\" rel=\"noopener noreferrer\"><div className=\"link_btn\">{social_btn.text1}</div></a>\r\n                     </div>\r\n                  )\r\n               }\r\n            </div>\r\n            <div className=\"row btn_grp\" id=\"desktop_btn\">\r\n               {social_btns.map((social_btn, i) =>     \r\n                     <div className=\"col-sm-4\" key={i}>\r\n                        <a href={social_btn.link} target=\"_blank\" rel=\"noopener noreferrer\"><div className=\"link_btn\">{social_btn.text}</div></a>\r\n                     </div>\r\n                  )\r\n               }\r\n            </div>\r\n         </div>\r\n         <ConnectWallet show={modalShow} onHide={() => setModalShow(false)} connectMetamask={onClickConnectWallet} />\r\n      </header>\r\n   ) : (null)\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nfunction Gallery() {\r\n    const [pos, setPos] = useState(0)\r\n    const [openseaLink, setOpenseaLink] = useState(\"\")\r\n    const [openseaUrl, setOpenseaUrl] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            let next = pos - 1;\r\n            setPos(next)\r\n        }, 20);\r\n    }, [pos])\r\n\r\n    useEffect(() => {\r\n        var date = new Date();\r\n        if(date.getMonth() >= 9 && date.getDay() >= 1) {\r\n            setOpenseaLink(\"VIEW ON OPENSEA\");\r\n            setOpenseaUrl(\"https://opensea.io/collection/supducks\");\r\n        } else {\r\n            setOpenseaLink(\"VIEW ON OPENSEA AFTER MINTING\");\r\n            setOpenseaUrl(\"\");\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <section>\r\n            <div  id=\"gallery\" style={{ backgroundPosition: pos }}></div>\r\n            <div className=\"GallerySlide_background text-center\">\r\n                <div className=\"ViewGallery container\"><a rel=\"noopener noreferrer\" href={openseaUrl} target=\"_blank\">{openseaLink}</a></div>\r\n            </div>\r\n        </section>\r\n    )\r\n    \r\n}\r\n\r\nexport default Gallery;\r\n","import React from 'react';\r\n\r\n\r\nfunction Team(Props) {\r\n\r\n    return Props.teams ?  (\r\n        <section id=\"team_back\">\r\n            <div className=\"container\">\r\n                <div className=\"text-center\">\r\n                    <h1 id=\"team_title\">TEAM</h1>\r\n                </div>\r\n                <img id=\"lightblack\" alt=\"\" src=\"images/landing/lightblack.svg\" />\r\n                <div className=\"team_grp text-center\">\r\n                    {\r\n                        Props.teams.map((team, i) => \r\n                            <div className=\"col-md-3 col-sm-6\" key={i}>\r\n                                <div>\r\n                                    <img className=\"team_img\" alt=\"\" src={team.avatar}/>\r\n                                </div>\r\n                                <div className=\"team_name\">{ team.name }</div>\r\n                                <div className=\"team_position\">{ team.position }</div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <h1 id=\"gallery_title\">Brainiac Exclusive Previews</h1>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    ) : (null)\r\n        \r\n}\r\n\r\nexport default Team;\r\n","import React from 'react';\r\n\r\nfunction Faq(props) {\r\n  return  props.faqs ? (\r\n    <section id=\"faq_black\">\r\n      <div id=\"faq_sector\"  className=\"container\">\r\n        <div id=\"faq\" className=\"text-center\">\r\n          <div id=\"faq_title\">FAQ</div>\r\n        </div>\r\n        <img id=\"lightblue\" alt=\"\"   src=\"images/landing/boundery.png\" />\r\n        <div className=\"row text-center\">\r\n          {props.faqs.map((faq, i) =>      \r\n            <div className=\"col faq_element\" key={i}>\r\n              <h3 className=\"faq_qus_title\">{ faq.title }</h3>\r\n              <h4>{ faq.content }</h4>\r\n            </div>\r\n          )}     \r\n        </div>\r\n        <div id=\"footer_text\">Built by NFTMASTERMINDS, All Rights Reserved &copy; {new Date().getFullYear()}</div>\r\n        <div id=\"faq\">\r\n          <img id=\"footer\" alt=\"\" src=\"images/landing/footer.png\" />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  ) : (null)\r\n}\r\n\r\nexport default Faq;\r\n","\nimport { useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers'\nimport { connectWallet, getCurrentWalletConnected, getContract} from './util/interact';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Claim from './Components/Claim';\nimport Header from './Components/Header';\nimport Gallery from './Components/Gallery';\nimport Team from './Components/Team';\nimport Faq from './Components/Faq';\n\nconst faqs = [\n  {'title': \"What is the total supply?\", 'content': \"The total supply will be announced soon!\"},\n  {'title': \"When is launch?\", 'content': \"Launch date will be announced along with supply.\"},\n  {'title': \"How much will it cost to mint a Brainiac Society NFT?\", 'content': \"0.08 ETH + gas.\"},\n  {'title': \"Will there be a presale?\", 'content': \"Yes, but ONLY to active community members who express their passion for this project by sharing, engaging, and truly supporting this movement.\"},\n]\nconst teams = [\n  {'avatar': \"images/landing/team002.png\", \"name\": \"Mr. Brainiac\", \"position\": \"Co Founder\"},\n  {'avatar': \"images/landing/team001.png\", \"name\": \"Dr. Brainiac\", \"position\": \"Co Founder\"},\n  {'avatar': \"images/landing/team013.png\", \"name\": \"Sir Vitaliy\", \"position\": \"Development\"},\n  {'avatar': \"images/landing/team014.png\", \"name\": \"Sir Genius Brain\", \"position\": \"Artwork\"},\n]\nconst social_btns = [\n  {'link': \"https://twitter.com/brainiacnfts\", 'text': \"BRAINIAC TWITTER\", 'text1': \"TWITTER\"},\n  {'link': \"https://discord.gg/Vkzv4VRYAk\", 'text': \"BRAINIAC DISCORD\", 'text1': \"DISCORD\"},\n  {'link': \"https://www.instagram.com/brainiacnfts\", 'text': \"BRAINIAC INSTAGRAM\", 'text1': \"INSTAGRAM\"},\n]\n\nfunction App() {\n\n  const [walletAddress, setWalletAddress] = useState();\n  const [status, setStatus] = useState(null);\n  const [loading, setMintLoading] = useState(false)\n  const [tokenPrice, setTokenPrice] = useState(null);\n  const [maxTokens, setMaxTokens] = useState(0);\n  const [maxTokenPurchase, setMaxTokenPurchase] = useState(0);\n  const [totalSupply, setTotalSupply] = useState(0)\n  // const [maxTokenPerWallet, setMaxTokenPerWallet] = useState(0);\n\n  const notify = () => toast.info(status, {\n    position: \"top-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n\n  useEffect(() => {\n    ( async () => {\n        let contract = getContract(walletAddress)\n        let mtb = await contract.MAX_TOKENS()\n        let mtp = await contract.maxTokenPurchase()\n        let ts = await contract.totalSupply()\n        let tp = await contract.tokenPrice()\n        setMaxTokens( parseInt(BigNumber.from(mtb).toString()) )\n        setMaxTokenPurchase( parseInt(BigNumber.from(mtp).toString()) )\n        setTotalSupply(BigNumber.from(ts).toString())\n        setTokenPrice( (BigNumber.from(tp).div(BigNumber.from(1e9).mul(BigNumber.from(1e4))).toString() ) )  // original value * 1e5\n    })();\n  }, [loading, walletAddress])\n\n  useEffect(() => {\n    (async () => { \n      const { address, status } = await getCurrentWalletConnected()\n      setWalletAddress(address)\n      setStatus(status)\n    })();\n  }, [])\n\n  useEffect(() => {\n    if (status) {\n      notify()\n      setStatus(null)\n    }\n  }, [status])\n\n  const onClickConnectWallet = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWalletAddress(walletResponse.address);\n  }\n\n  const onClickDisconnectWallet = async () => {\n    setWalletAddress(null)\n  }\n\n  \n  return (\n    <div className=\"App\">\n      <Header social_btns={social_btns} onClickDisconnectWallet={onClickDisconnectWallet} onClickConnectWallet={onClickConnectWallet} walletAddress={walletAddress} />\n      <Claim maxTokenPurchase={maxTokenPurchase} maxTokens={maxTokens} tokenPrice={tokenPrice} setStatus={setStatus} \n          loading={loading} walletAddress={walletAddress} totalSupply={totalSupply} setMintLoading={setMintLoading}  />\n      <Team teams={teams} />\n      <Gallery />\n      <Faq faqs={faqs} />\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}